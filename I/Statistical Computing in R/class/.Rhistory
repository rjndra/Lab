oz_median
AQ$Ozone[is.na(AQ$Ozone)] <- oz_median
AQ$Ozone
AQ$Ozone[is.na(AQ$Ozone)]
#Now  we can see there are no any NA values
#replacing for Solar.R
AQ$Solar.R[is.na(AQ$Solar.R)]
AQ$Solar.R[is.na(AQ$Solar.R)] <- mean(AQ$Solar.R)
#replacing for Solar.R
AQ$Solar.R[is.na(AQ$Solar.R)]
AQ$Ozone[is.na(AQ$Ozone)]
AQ <- airquality
str(AQ)
AQ$Ozone[is.na(AQ$Ozone)]
#replace missing values of Ozone with median
oz_median <- median(AQ$Ozone, na.rm = T)
oz_median
AQ$Ozone[is.na(AQ$Ozone)] <- oz_median
AQ$Ozone[is.na(AQ$Ozone)]
AQ$Solar.R
str(AQ$Solar.R)
AQ$Solar.R[is.na(AQ$Solar.R)] <- mean(AQ$Solar.R, na.rm = T)
#replacing for Solar.R
AQ$Solar.R[is.na(AQ$Solar.R)]
AQ$Solar.R[is.na(AQ$Solar.R)]
length(AQ)
length(AQ$Ozone)
date
AQ$date
?as.Date
?Date
AQ$date <- Date("2020-01-01", "%Y-%m-%d")
AQ$date <- Date("2020-01-01", "%Y-%m-%d")
AQ$date <- as.Date("2020-01-01", "%Y-%m-%d")
AQ$date
AQ
AQ$date <- as.Date("2020-01-01", "%Y-%m-%d") + seq(1,153)
AQ <- airquality
AQ$Temp[is.na(AQ$Temp)]
plot(AQ$Temp ~ AQ$Day)
plot(AQ$Temp,AQ$Day)
plot(AQ$Temp ~ AQ$Day)
plot(AQ$Temp, AQ$Day, type=l)
plot(AQ$Temp, AQ$Day, type="l")
?plot
barplot(AQ$Temp)
barplot(AQ$Temp, names=seq(min(AQ$Temp), max(AQ$Temp)))
min(AQ$Temp)
max(AQ$Temp)
barplot(AQ$Temp, names=seq(min(AQ$Temp), max(AQ$Temp), by=3))
barplot(AQ$Temp, xlab=seq(min(AQ$Temp), max(AQ$Temp), by=3))
hist(AQ$Temp)
barplot(AQ$Temp, names=seq(50, 100, by=5))
barplot(AQ$Temp, names.arg=seq(50, 100, by=5))
seq(50, 100, by=5)
barplot(AQ$Temp, names.arg= c("50-55", "60-65", "70-75", "80-85", "90-95"))
hist(AQ$Temp)
barplot(AQ$Temp, names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"))
barplot(AQ$Temp) #, names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"))
barplot(AQ$Temp, xlim = c(0,10))# names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(0,10), names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
gd <- as.data.frame(VADeaths)
view(gd)
AQ <- as.data.frame(airquality)
barplot(AQ$Temp, xlim = c(0,10), names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
gd <- as.data.frame(VADeaths)
view(gd)
gd <- as.data.frame(VADeaths)
barplot(gd$`Rural Male`)
barplot(gd$`Rural Male`, names.arg = c("50-54", "55-59", "60-64", "65-69", "70-74"))
hist(AQ$Temp)
barplot(AQ$Temp, xlim = c(40, 120), names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(0, 100), names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(40, 120))# names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(40, 120))# names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(0, 100))# names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
barplot(AQ$Temp, xlim = c(0, 100))# names.arg = c("50-55", "60-65", "70-75", "80-85", "90-95"))
AQ$Temp
hist(AQ$Temp)
barplot(AQ$Temp, names.arg = seq(min(AQ$Temp), max(AQ$Temp)))
seq(min(AQ$Temp), max(AQ$Temp))
hist(AQ$Temp)
plot(AQ$Temp, AQ$Day, type="l")
plot(AQ$Temp ~ AQ$Day, type="l")
barplot(AQ$Temp, names.arg = seq(min(AQ$Temp), max(AQ$Temp)))
hist(AQ$Temp, xlab = )
plot(AQ$Temp ~ AQ$Day, type="l")
plot(AQ$Temp ~ AQ$Day, type="l", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
barplot(AQ$Temp, names.arg = seq(min(AQ$Temp), max(AQ$Temp)))
hist(AQ$Temp, xlab = "Temperature", main="Histogram of Temperature")
#qqplot of Temp
qqnorm(AQ$Temp)
AQ
?qq
??qq
qqplot(AQ$Temp)
#qqplot of Temp
qqnorm(AQ$Temp)
AQ
#scatterplot of temp & wind
plot(AQ$Temp, AQ$Wind)
#scatterplot of temp & wind
plot(AQ$Temp, AQ$Wind, xlab="Temperature", ylab="Wind", main="Temp vs Wind")
#qqplot of Temp
qqnorm(AQ$Temp, main="QQ Plot of Temp")
#scatterplot of temp & wind
plot(AQ$Temp, AQ$Wind, xlab="Temperature", ylab="Wind", main="Temp vs Wind")
#temperature decreases as wind
cor(AQ$Day, AQ$Temp)
plot(AQ$Temp ~ AQ$Day, type="l", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
#temperature decreases as wind
cor(AQ$Temp, AQ$Wind)
plot(AQ$Temp ~ AQ$Day, type="", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
plot(AQ$Temp ~ AQ$Day, type="b", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
plot(AQ$Temp ~ AQ$Day, type="c", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
plot(AQ$Temp ~ AQ$Day, type="o", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
plot(AQ$Temp ~ AQ$Day, type="p", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
#scatterplot of temp & wind
plot(AQ$Temp, AQ$Wind, xlab="Temperature", ylab="Wind", main="Temp vs Wind")
AQ <- airquality
plot(AQ$Temp ~ AQ$Day, type="l", xlab="Days", ylab="Temperature", main="Line Plot of Temp & Day")
#Temperate is not dependent of Day, as most of the Day have high temperature & also low temperature, so they have negative or 0 correlation
#barplot of temp
barplot(AQ$Temp, names.arg = seq(min(AQ$Temp), max(AQ$Temp)))
#barplot of temp
barplot(AQ$Temp)
#barplot of temp
barplot(AQ$Temp, axis=seq(50,100))
?axis
#barplot of temp
barplot(AQ$Temp, axis=(1,seq(50,100)))
#barplot of temp
barplot(AQ$Temp, axis=(1 at seq(50,100)))
#barplot of temp
barplot(AQ$Temp, axis=(1, seq(50,100)))
library(igraph)
g <- graph(c(1,2))
plot(g)
g1 <- graph(c("R", "S", "S", "T", "T", "R", "R", "T", "U", "S"))
plot(g1)
plot(g1, vertex.color="green")
plot(g1, vertex.color="green", vertex.size=30)
plot(g1, vertex.color="green", vertex.size=30, edge.color="red", edge.size=5)
plot(g1, vertex.color="green", vertex.size=30, edge.color="red", edge.size=5)
plot(g1, vertex.color="green", vertex.size=30, edge.color="red", edge.size=5)
source("C:/Users/user/Documents/Exam/1st Sem/10/10.R", echo=TRUE)
source("C:/Users/user/Documents/Exam/1st Sem/10/10.R", echo=TRUE)
degree(g1)
closeness(gq)
closeness(g1)
betweenness(g1)
closeness(g1)
betweenness(g1)
AQ <- airquality
mean_temp <- mean(AQ$Temp, na.rm=T)
sd_temp <- sd(AQ$Temp)
library(tid)
library(tidyverse)
library(dplyr)
?tibble
AQ <- airquality
mean_temp <- mean(AQ$Temp, na.rm=T)
sd_temp <- sd(AQ$Temp)
mean_ref_rang_up <- mean_temp + 2 * sd_temp
mean_ref_rang_up <- mean_temp + 2 * sd_temp
mean_ref_rang_down <- mean_temp - 2 * sd_temp
boxplot(AQ$Temp)
mean_ref_rang_up
mean_ref_rang_down
hist(AQ$Temp)
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp")
abline(v, mean_ref_rang_up)
?abline
abline(mean_ref_rang_up)
abline(v=mean_ref_rang_up)
abline(v=mean_ref_rang_down)
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(0,100))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(50,130))
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(50,110))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
median_temp <- median(AQ$Temp, na.rm=T)
median_temp
iqr_temp <- IQR(AQ$Temp)
iqr_temp
med_ref_rang_up <- med_temp + 2 * iqr_temp
med_temp <- median(AQ$Temp, na.rm=T)
iqr_temp <- IQR(AQ$Temp)
med_ref_rang_up <- med_temp + 2 * iqr_temp
med_ref_rang_down <- med_temp - 2 * iqr_temp
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(50,110))
abline(v=med_ref_rang_up, col="red", lwd=2)
abline(v=med_ref_rang_down, col="red", lwd=2)
med_ref_rang_up <- med_temp + 1.5 * iqr_temp
med_ref_rang_down <- med_temp - 1.5 * iqr_temp
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(50,110))
abline(v=med_ref_rang_up, col="red", lwd=2)
abline(v=med_ref_rang_down, col="red", lwd=2)
hist(AQ$Temp, main="Histogram of Temp", xlab="Temp", xlim=c(50,110))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
hist(AQ$Temp, main="Histogram of Temp with Mean ref range", xlab="Temp", xlim=c(50,110))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
med_ref_rang_up <- med_temp + 1.5 * iqr_temp
med_ref_rang_down <- med_temp - 1.5 * iqr_temp
hist(AQ$Temp, main="Histogram of Temp with Median ref range", xlab="Temp", xlim=c(50,110))
abline(v=med_ref_rang_up, col="red", lwd=2)
abline(v=med_ref_rang_down, col="red", lwd=2)
abline(v=mean_temp, col="red")
abline(v=med_temp, col="green")
med_temp
mean_temp
hist(AQ$Temp, main="Histogram of Temp with Mean ref range", xlab="Temp", xlim=c(50,110))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="darkred", lwd=2)
legend(topright, legend= c("Upper Range limit", "Lower Range Limit"), col = c("red", "darkred"))
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), col = c("red", "darkred"))
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), fill = c("red", "darkred"))
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), fill = c("darkred", "red"))
hist(AQ$Temp, main="Histogram of Temp with Median ref range", xlab="Temp", xlim=c(50,110))
abline(v=med_ref_rang_up, col="darkred", lwd=2)
abline(v=med_ref_rang_down, col="red", lwd=2)
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), fill = c("darkred", "red"))
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), fill = c("darkred", "red"), lwd=2)
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), col = c("darkred", "red"), lwd=2)
hist(AQ$Temp, main="Histogram of Temp with Median ref range", xlab="Temp", xlim=c(50,110))
abline(v=med_ref_rang_up, col="darkred", lwd=2)
abline(v=med_ref_rang_down, col="red", lwd=2)
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), col = c("darkred", "red"), lwd=2)
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), col = c("red", "darkred"), lwd=2)
hist(AQ$Temp, main="Histogram of Temp with Mean ref range", xlab="Temp", xlim=c(50,110))
abline(v=mean_ref_rang_up, col="red", lwd=2)
abline(v=mean_ref_rang_down, col="darkred", lwd=2)
legend("topright", legend= c("Upper Range limit", "Lower Range Limit"), col = c("red", "darkred"), lwd=2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(16)
x <- sample(100, replace = TRUE)
set.seed(16)
y <- x + sample(100, replace = TRUE)
z <- x^2
par(mfrow=c(2,3))
cat('Scatter plot of x and y')
plot(x, y, main = "Scatterplot of x and y", xlab = "x", ylab = "y")
cat('Bar plot of factor variable month')
barplot(table(month), main = "Barplot of month", xlab = "Month", ylab = "Frequency")
set.seed(16)
month <- factor(sample(month.name, 100, replace = TRUE))
set.seed(16)
ts_data <- ts(sample(1:100, 100, replace = TRUE), start = c(1970, 1), frequency = 12)
set.seed(16)
ts_date <- as.Date("1970/01/01") + sample(0:365, 100, replace = TRUE)
par(mfrow=c(2,3))
cat('Scatter plot of x and y')
plot(x, y, main = "Scatterplot of x and y", xlab = "x", ylab = "y")
cat('Bar plot of factor variable month')
barplot(table(month), main = "Barplot of month", xlab = "Month", ylab = "Frequency")
cat('Box plot of ts_data')
boxplot(ts_data, main = "Boxplot of ts_data")
cat('Time series plot of ts_data')
plot(ts_data, main = "Time series plot of ts_data", xlab = "Year", ylab = "Value")
cat('Date plot of ts_date and y')
plot(ts_date, y, main = "Date plot of ts_date and y", xlab = "Date", ylab = "y")
cat('Plot of z vs x')
plot(x, z, main = "Plot of z vs x", xlab = "x", ylab = "z")
par(mfrow=c(1,1))
par(mfrow = c(1,1))
plot(log(x), log(z), main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log=x, main = "Plot of log x", xlab = "log(x)", ylab = "z")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(log(x), log(z), main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(log(x), log(z), log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xz", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(log(x), z, main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(log(x), z, main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, log(z), main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(log(x), z, main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, log(z), main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(log(x), log(z), main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(log(x), z, main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, log(z), main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(log(x), log(z), main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
points(log(x*z), log(z), col = "red")
par(mfrow = c(1,3))
plot(log(x), z, main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, log(z), main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(log(x), log(z), main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
par(mfrow = c(1,3))
plot(x, z, log="x", main = "Plot of log x", xlab = "log(x)", ylab = "z")
plot(x, z, log="y", main = "Plot of log z", xlab = "x", ylab = "log(z)")
plot(x, z, log="xy", main = "Plot of log x and log z", xlab = "log(x)", ylab = "log(z)")
mtcars
str(mtcars)
class(mtcars)
library(tidyverse)
str(mtcars)
class(mtcars)
class(mpg)
str(mpg)
class(mpg)
mpg
ggplot(data=mpg) +
geom_point(mapping = aes(x=disp, y=hwy))
ggplot(data=mpg) +
geom_point(mapping = aes(x=dsp, y=hwy))
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point()
??ggplot
?gplot
ggplot(data=mpg)+
aes(x=displ, y=hwy) +
geom_point()
ggplot(data=mpg)+
aes(x=displ, y=hwy, type=l) +
geom_point()
?aes
ggplot(data=mpg)+
aes(x=displ, y=hwy) +
geom_point()
ggplot(data=mpg) +
geom_point(mapping = aes(x=displ, y=hwy), xlab="ss")
#it seems like to have inverse relationship between these two data
cor(mpg$displ, mpg$hwy)
cor.test(mpg$displ, mpg$hwy)
diameter(g)
diameter(g)
library(tidyverse)
library(igraph)
load("D:\\R programming runs\\Assisgnments\\Assignment 3\\Manish Shah - termDocMatrix.rdata")
str(termDocMatrix)
# It is a term document matrix with Terms & Values(Docs)
# first 10 row & 10 col
termDocMatrix[1:10, 1:10]
# tdm to matrix
term_matrix <- as.matrix(termDocMatrix)
#Change this matrix to a Boolean matrix
term_matrix[term_matrix >= 1] <- 1
#Transform this matrix to a term-term adjacency
term_adj_matrix <- term_matrix %*% t(term_matrix)
term_adj_matrix[1:10, 1:10]
g <- graph.adjacency(term_adj_matrix, mode = "undirected", weighted = T)
#simplify - remove loops
g <- simplify(g, remove.multiple = TRUE, remove.loops = TRUE)
#vertex labels with names of g,
V(g)$label <- V(g)$name
#set degree with the degree of g
V(g)$degree <- degree(g)
degree_all <- degree(g, mode = "all")
degree_in <- degree(g, mode = "in")
degree_out <- degree(g, mode = "out")
#diameter of g
diameter(g)
#edge density
edge_density(g)
#reciprocity
reciprocity(g)
#closeness
closeness(g)
#betweeness
betweenness(g)
degree_dist <- degree_distribution(g, mode = "all")
hist(degree_dist, main = "Node Degree Histogram", xlab = "Node Degree")
set.seed(16)
plot(g, vertex.size = degree_all*0.4)
plot(g, layout=layout.fruchterman.reingold)
plot(g, layout=layout.kamada.kawai)
hub <- hub_score(g)
authority <- authority.score(g)
# Plot hub scores
plot(hub$vector)
plot(authority$vector)
# Detect communities
fc <- cluster_fast_greedy(g)
# Plot communities
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
diameter(g)
edge_density(g)
reciprocity(g)
closeness(g)
betweenness(g)
degree_dist <- degree_distribution(g, mode = "all")
hist(degree_dist, main = "Node Degree Histogram", xlab = "Node Degree")
degree_dist <- degree_distribution(g, mode = "all")
hist(degree_all, main = "Node Degree Histogram", xlab = "Node Degree")
plot(g, vertex.size = degree_all*0.4, main="Twitter Network Graph")
degree_all <- degree(g, mode = "all")
degree_all
degree(g, mode = "in")
degree(g, mode = "out")
plot(g, layout=layout.fruchterman.reingold, main="Graph with Fruchterman Reingold Layout")
plot(g, layout=layout.kamada.kawai)
hub <- hub_score(g)
authority <- authority.score(g)
plot(hub$vector)
plot(authority$vector)
fc <- cluster_fast_greedy(g)
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
library(tidyverse)
library(igraph)
load("D:\\R programming runs\\Assisgnments\\Assignment 3\\Manish Shah - termDocMatrix.rdata")
str(termDocMatrix)
# It is a term document matrix with Terms & Values(Docs)
# first 10 row & 10 col
termDocMatrix[1:10, 1:10]
# tdm to matrix
term_matrix <- as.matrix(termDocMatrix)
#Change this matrix to a Boolean matrix
term_matrix[term_matrix >= 1] <- 1
#Transform this matrix to a term-term adjacency
term_adj_matrix <- term_matrix %*% t(term_matrix)
term_adj_matrix[1:10, 1:10]
g <- graph.adjacency(term_adj_matrix, mode = "undirected", weighted = T)
#simplify - remove loops
g <- simplify(g, remove.multiple = TRUE, remove.loops = TRUE)
#vertex labels with names of g,
V(g)$label <- V(g)$name
#set degree with the degree of g
V(g)$degree <- degree(g)
degree_all <- degree(g, mode = "all")
degree_in <- degree(g, mode = "in")
degree_out <- degree(g, mode = "out")
#diameter of g
diameter(g)
#edge density
edge_density(g)
#reciprocity
reciprocity(g)
#closeness
closeness(g)
#betweeness
betweenness(g)
hist(degree_all, main = "Node Degree Histogram", xlab = "Node Degree")
set.seed(16)
plot(g, vertex.size = degree_all*0.4)
plot(g, layout=layout.fruchterman.reingold)
plot(g, layout=layout.kamada.kawai)
hub <- hub_score(g)
authority <- authority.score(g)
# Plot hub scores
plot(hub$vector)
plot(authority$vector)
# Detect communities
fc <- cluster_fast_greedy(g)
# Plot communities
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
fc <- cluster_fast_greedy(g)
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
fc <- cluster_fast_greedy(g)
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
# Plot communities
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
# Plot communities
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
# Plot communities
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
# Plot hub scores
plot(hub$vector)
# Plot hub scores
par(mfrow=c(2,1))
plot(hub$vector)
plot(authority$vector)
par(mfrow=c(1,1))
# Plot hub scores
par(mfrow=c(1,2))
plot(hub$vector)
plot(authority$vector)
# Plot hub scores
par(mfrow=c(2,2))
plot(hub$vector)
plot(authority$vector)
par(mfrow=c(1,1))
fc <- cluster_fast_greedy(g)
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
fc <- cluster_fast_greedy(g)
plot(fc, g, vertex.color = fc$membership, main = 'Community Detection')
install.packages("caret")
